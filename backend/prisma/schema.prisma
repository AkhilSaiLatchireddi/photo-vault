// Database schema for PhotoVault
// This file defines the database structure using Prisma ORM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  cognitoId   String   @unique @map("cognito_id")
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  avatar      String?
  storageUsed BigInt   @default(0) @map("storage_used") // in bytes
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  files     File[]
  albums    Album[]
  memories  Memory[]
  shares    Share[]
  tags      Tag[]

  @@map("users")
}

model File {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  filename         String
  originalFilename String    @map("original_filename")
  fileType         String    @map("file_type") // 'image' or 'video'
  fileSize         BigInt    @map("file_size")
  mimeType         String    @map("mime_type")
  s3Key            String    @map("s3_key")
  s3Bucket         String    @map("s3_bucket")
  
  // Image/Video metadata
  width       Int?
  height      Int?
  duration    Int? // for videos, in seconds
  
  // Date information
  takenAt     DateTime? @map("taken_at")
  uploadedAt  DateTime  @default(now()) @map("uploaded_at")
  
  // Location data
  latitude    Float?
  longitude   Float?
  locationName String? @map("location_name")
  
  // Processing status
  status      FileStatus @default(PROCESSING)
  
  // Metadata and thumbnails (JSON)
  metadata    Json?
  thumbnails  Json?
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  albumFiles  AlbumFile[]
  memoryFiles MemoryFile[]
  shares      Share[]
  fileTags    FileTag[]
  faces       Face[]

  @@index([userId])
  @@index([takenAt])
  @@index([status])
  @@index([fileType])
  @@map("files")
}

model Album {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  description String?
  coverFileId String?  @map("cover_file_id")
  isShared    Boolean  @default(false) @map("is_shared")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  albumFiles AlbumFile[]
  shares     Share[]

  @@index([userId])
  @@map("albums")
}

model AlbumFile {
  id       String @id @default(cuid())
  albumId  String @map("album_id")
  fileId   String @map("file_id")
  order    Int    @default(0)
  addedAt  DateTime @default(now()) @map("added_at")

  // Relations
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
  file  File  @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([albumId, fileId])
  @@map("album_files")
}

model Memory {
  id               String     @id @default(cuid())
  userId           String     @map("user_id")
  title            String
  description      String?
  memoryType       MemoryType @map("memory_type")
  startDate        DateTime?  @map("start_date")
  endDate          DateTime?  @map("end_date")
  locationName     String?    @map("location_name")
  locationLat      Float?     @map("location_lat")
  locationLng      Float?     @map("location_lng")
  coverFileId      String?    @map("cover_file_id")
  photoCount       Int        @default(0) @map("photo_count")
  isFavorite       Boolean    @default(false) @map("is_favorite")
  isShared         Boolean    @default(false) @map("is_shared")
  visibility       Visibility @default(PRIVATE)
  metadata         Json?
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  memoryFiles MemoryFile[]
  shares      Share[]

  @@index([userId])
  @@index([memoryType])
  @@index([startDate, endDate])
  @@map("memories")
}

model MemoryFile {
  id             String  @id @default(cuid())
  memoryId       String  @map("memory_id")
  fileId         String  @map("file_id")
  orderIndex     Int     @map("order_index")
  isKeyPhoto     Boolean @default(false) @map("is_key_photo")
  addedAuto      Boolean @default(true) @map("added_automatically")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  memory Memory @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([memoryId, fileId])
  @@map("memory_files")
}

model Face {
  id         String @id @default(cuid())
  fileId     String @map("file_id")
  personId   String? @map("person_id")
  boundingBox Json  @map("bounding_box") // {x, y, width, height}
  confidence Float
  encoding   Json?  // Face encoding for recognition
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  file   File    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  person Person? @relation(fields: [personId], references: [id])

  @@index([fileId])
  @@index([personId])
  @@map("faces")
}

model Person {
  id        String   @id @default(cuid())
  name      String?
  faceCount Int      @default(0) @map("face_count")
  coverFaceId String? @map("cover_face_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  faces Face[]

  @@map("persons")
}

model Tag {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  color     String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileTags FileTag[]

  @@unique([userId, name])
  @@map("tags")
}

model FileTag {
  id     String @id @default(cuid())
  fileId String @map("file_id")
  tagId  String @map("tag_id")
  confidence Float? // For AI-generated tags

  // Relations
  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([fileId, tagId])
  @@map("file_tags")
}

model Share {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  fileId     String?   @map("file_id")
  albumId    String?   @map("album_id")
  memoryId   String?   @map("memory_id")
  shareToken String    @unique @map("share_token")
  expiresAt  DateTime? @map("expires_at")
  isPublic   Boolean   @default(false) @map("is_public")
  password   String?   // Hashed password for protected shares
  viewCount  Int       @default(0) @map("view_count")
  createdAt  DateTime  @default(now()) @map("created_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  file   File?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  album  Album?  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  memory Memory? @relation(fields: [memoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([shareToken])
  @@map("shares")
}

// Enums
enum FileStatus {
  PROCESSING
  READY
  ERROR
  DELETED
}

enum MemoryType {
  THIS_DAY
  TRIP
  PEOPLE
  SEASONAL
  EVENT
  RECENT_HIGHLIGHTS
  CUSTOM
}

enum Visibility {
  PRIVATE
  FAMILY
  PUBLIC
}
