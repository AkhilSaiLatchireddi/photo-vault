# PhotoVault Lambda Environment Configuration

# =========================================
# ENVIRONMENT VARIABLES MAPPING
# =========================================

# These environment variables will be automatically populated in Lambda
# from AWS SSM Parameter Store values defined in serverless.yml

## Database
MONGODB_URI=${ssm:/photovault/prod/mongodb-uri~true}
# This replaces the old MONGODB_USERNAME and MONGODB_PASSWORD approach
# Example: mongodb+srv://username:password@cluster.mongodb.net/photovault

## AWS Services  
AWS_REGION=us-east-1
S3_BUCKET_NAME=${ssm:/photovault/prod/s3-bucket}
# Lambda execution role provides AWS credentials automatically

## Authentication
JWT_SECRET=${ssm:/photovault/prod/jwt-secret~true}
AUTH0_DOMAIN=${ssm:/photovault/prod/auth0-domain}
AUTH0_CLIENT_ID=${ssm:/photovault/prod/auth0-client-id}
# AUTH0_AUDIENCE will be auto-derived from API Gateway URL

## Runtime
NODE_ENV=production
AWS_LAMBDA_FUNCTION_NAME=photovault-api
# This environment variable is automatically set by Lambda

# =========================================
# LOCAL DEVELOPMENT OVERRIDES
# =========================================
# For local development, create a .env file with:

# MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/photovault
# S3_BUCKET_NAME=photovault-storage-dev
# JWT_SECRET=your-local-jwt-secret-at-least-32-chars
# AUTH0_DOMAIN=your-app.auth0.com
# AUTH0_CLIENT_ID=your-auth0-client-id
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_REGION=us-east-1
# NODE_ENV=development
